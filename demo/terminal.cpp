// Terminal Assembler
#include "Translator.hh"
#include "EventEnum.hh"

// Utils
#include <iostream>
#include <string>
#include <fstream>

// Global constants
const uint64_t LINE_START = 1;

// Print helpful information to the terminal
void printHelp() {
    printf(R"(

             ▄▄    ▄▄            ▄▄▄▄
             ██    ██            ▀▀██
             ██    ██   ▄████▄     ██      ██▄███▄
             ████████  ██▄▄▄▄██    ██      ██▀  ▀██
             ██    ██  ██▀▀▀▀▀▀    ██      ██    ██
             ██    ██  ▀██▄▄▄▄█    ██▄▄▄   ███▄▄██▀
             ▀▀    ▀▀    ▀▀▀▀▀      ▀▀▀▀   ██ ▀▀▀
                                           ██


MAIN MENU OPTIONS:
Run: Processes the input assembly file and generates the output file.
Options: Allows you to set the input and output file paths.
Help: Displays this help screen.
Exit: Closes the application.
)");

// OLD INSTRUCTIONS
// Welcome to Use My Assembler (USA)! This program assembles source code
// from an assembly language file into a machine code output file.\n
// To use this assembler, input the following into the command line:
//     ./assemble <INPUT_FILE> <OUTPUT_FILE>\n

}

void printFlag() {

        std::cout << "@@@@@@**@@@@@**@@@@@*+@@@@@#+%@@@@%+#@@@@%+*@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::\n";
        std::cout << "@@%*@@@@@@*@@@@@@*@@@@@@*%@@@@@##@@@@@%*@@@@@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::\n";
        std::cout << "@@=:#@@@@*:*@@@@*:+@@@@#:=@@@@%--%@@@@=:#@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=\n";
        std::cout << "@@*=%@@@@#=#@@@@%=*@@@@@=+@@@@@=+@@@@@+=@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=\n";
        std::cout << "@@@@@@#%@@@@@%%@@@@@%#@@@@@@#@@@@@@#@@@@@@#@@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::\n";
        std::cout << "@@@@@%-=@@@@%--%@@@@=-%@@@@*:#@@@@#:*@@@@#:+@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::\n";
        std::cout << "@@@@@@-=@@@@@=-@@@@@+-@@@@@*:%@@@@#:*@@@@%:+@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=\n";
        std::cout << "@@@%@@%%@@#@@%%@@%@@%%@@%@@%@@@%@@@@%@@%@@%%@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=\n";
        std::cout << "@@+-%@@@@*-#@@@@#-*@@@@%-+@@@@%==@@@@@+=%@@@@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::\n";
        std::cout << "@@+:%@@@@*:#@@@@#:*@@@@%:=@@@@@--@@@@@=:%@@@@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::\n";
        std::cout << "@@%%@@@@@%%%@@@@%%%@@@@@%%@@@@@%%@@@@@%%@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=\n";
        std::cout << "@@@@@@+#@@@@@**@@@@@*+@@@@@#=%@@@@%=%@@@@@=#@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=\n";
        std::cout << "@@@@@%:-@@@@@-:%@@@@=:%@@@@+:*@@@@*:+@@@@#:=@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::\n";
        std::cout << "@@@@@@**@@@@@**@@@@@**%@@@@#*%@@@@%+#@@@@%**@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::\n";
        std::cout << "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=\n";
        std::cout << "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=\n";
        std::cout << "::::::::::::::::_:::_:::::::_:_:::::::::::_:::::::::::::::::____::_::::::::_::::::::::::::::::::::::\n";
        std::cout << ":::::::::::::::| | | |_ __ (_) |_ ___  __| |:::::::::::::::/ ___|| |_ __ _| |_:___::___:::::::::::::\n";
        std::cout << "%%%%%%%%%%%%%%%| | | | '_ \\| | __/ _ \\/ _` |%%%%%%%%%%%%%%%\\___ \\| __/ _` | __/ _ \\/ __|%%%%%%%%%%%=\n";
        std::cout << "%%%%%%%%%%%%%%%| |_| | | | | | ||  __/ (_| |%%%%%%%%%%%%%%% ___) | || (_| | ||  __/\\__ \\%%%%%%%%%%%=\n";
        std::cout << "::::::::::::::: \\___/|_| |_|_|\\__\\___|\\__,_|:::::::::::::::|____/ \\__\\__,_|\\__\\___||___/::::::::::::\n";
        std::cout << "::::::::::::::::::::::::::::::_:::::::::::::::::::::::::::_:::::_:::::::::::::::::::::::::::::::::::\n";
        std::cout << "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%/ \\%%%___%___%%___%_%__%___%| |__%| |%___%_%__%%%%%%%%%%%%%%%%%%%%%%%%=\n";
        std::cout << "%%%%%%%%%%%%%%%%%%%%%%%%%%%%/ _ \\%/ __/ __|/ _ \\ '_ ` _ \\| '_ \\| |/ _ \\ '__|%%%%%%%%%%%%%%%%%%%%%%%=\n";
        std::cout << ":::::::::::::::::::::::::: / ___ \\\\__ \\__ \\  __/ | | | | | |_) | |  __/ |:::::::::::::::::::::::::::\n";
        std::cout << "::::::::::::::::::::::::::/_/   \\_\\___/___/\\___|_| |_| |_|_.__/|_|\\___|_|:::::::::::::::::::::::::::\n";
        std::cout << "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=\n";
        std::cout << "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=\n";

/*
    printf(R"(
@@@@@@**@@@@@**@@@@@*+@@@@@#+%@@@@%+#@@@@%+*@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::
@@%*@@@@@@*@@@@@@*@@@@@@*%@@@@@##@@@@@%*@@@@@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::
@@=:#@@@@*:*@@@@*:+@@@@#:=@@@@%--%@@@@=:#@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=
@@*=%@@@@#=#@@@@%=*@@@@@=+@@@@@=+@@@@@+=@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=
@@@@@@#%@@@@@%%@@@@@%#@@@@@@#@@@@@@#@@@@@@#@@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::
@@@@@%-=@@@@%--%@@@@=-%@@@@*:#@@@@#:*@@@@#:+@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::
@@@@@@-=@@@@@=-@@@@@+-@@@@@*:%@@@@#:*@@@@%:+@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=
@@@%@@%%@@#@@%%@@%@@%%@@%@@%@@@%@@@@%@@%@@%%@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=
@@+-%@@@@*-#@@@@#-*@@@@%-+@@@@%==@@@@@+=%@@@@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::
@@+:%@@@@*:#@@@@#:*@@@@%:=@@@@@--@@@@@=:%@@@@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::
@@%%@@@@@%%%@@@@%%%@@@@@%%@@@@@%%@@@@@%%@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=
@@@@@@+#@@@@@**@@@@@*+@@@@@#=%@@@@%=%@@@@@=#@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=
@@@@@%:-@@@@@-:%@@@@=:%@@@@+:*@@@@*:+@@@@#:=@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::
@@@@@@**@@@@@**@@@@@**%@@@@#*%@@@@%+#@@@@%**@@-:::::::::::::::::::::::::::::::::::::::::::::::::::::
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=
::::::::::::::::_:::_:::::::_:_:::::::::::_:::::::::::::::::____::_::::::::_::::::::::::::::::::::::
:::::::::::::::| | | |_ __ (_) |_ ___  __| |:::::::::::::::/ ___|| |_ __ _| |_:___::___::::::::::::: 
%%%%%%%%%%%%%%%| | | | '_ \| | __/ _ \/ _` |%%%%%%%%%%%%%%%\___ \| __/ _` | __/ _ \/ __|%%%%%%%%%%%=
%%%%%%%%%%%%%%%| |_| | | | | | ||  __/ (_| |%%%%%%%%%%%%%%% ___) | || (_| | ||  __/\__ \%%%%%%%%%%%=
::::::::::::::: \___/|_| |_|_|\__\___|\__,_|:::::::::::::::|____/ \__\__,_|\__\___||___/::::::::::::
::::::::::::::::::::::::::::::_:::::::::::::::::::::::::::_:::::_:::::::::::::::::::::::::::::::::::
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%/ \%%%___%___%%___%_%__%___%| |__%| |%___%_%__%%%%%%%%%%%%%%%%%%%%%%%%=
%%%%%%%%%%%%%%%%%%%%%%%%%%%%/ _ \%/ __/ __|/ _ \ '_ ` _ \| '_ \| |/ _ \ '__|%%%%%%%%%%%%%%%%%%%%%%%=
:::::::::::::::::::::::::: / ___ \\__ \__ \  __/ | | | | | |_) | |  __/ |:::::::::::::::::::::::::::
::::::::::::::::::::::::::/_/   \_\___/___/\___|_| |_| |_|_.__/|_|\___|_|:::::::::::::::::::::::::::
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=
)");
*/

}

// Run the main assembler program
void runAssembler(Translator &translator) {
    // Create lines
    translator.define_lines(translator.get_input_file_path());

    EventEnum result = translator.first_pass();
    if (result == EventEnum::SUCCESS) {
        result = translator.second_pass();
    }

    if (result == EventEnum::SUCCESS) {
        std::cout << "Translation successful! Output written to " << translator.get_output_file_path() << std::endl;
    } else {
        std::cerr << "Translation failed: " << translator.get_error_message() << std::endl;
    }

    // Reset translator
    translator.reset();
}

int main() {
    // Initalize a translator instance with default directories
    Translator translator("demo/input.asm", "demo/output.hex");
    // MAYBE CHANGE DEFAULT DIRS TO WHERE THE PROGRAM IS INSTALLED BEFORE SHIPPING

    // Init IO file paths vars
    std::string inputPath = translator.get_input_file_path();
    std::string outputPath = translator.get_output_file_path();

    // Exit condition
    bool exit = false;

    printFlag();

    while (!exit) {
        // Main menu
        std::cout << "------------------------------------\n";
        std::cout << " United States Assembler (USA) Menu\n";
        std::cout << "------------------------------------\n";
        std::cout << "1. Run\n";
        std::cout << "2. Options\n";
        std::cout << "3. Help\n";
        std::cout << "4. Exit\n";
        std::cout << "Select an option: ";

        // Poll user for a choice
        int choice;
        std::cin >> choice;

        switch (choice) {
            case 1: // Case one runs the assembler
                // Make sure that the file paths exist
                if (!inputPath.empty() && !outputPath.empty()) {
                    // translator.set_input_file_path(inputPath);
                    // translator.set_output_file_path(outputPath);
                    runAssembler(translator);
                } else {
                    // If the file paths did not exist, prompt the user to set them in the options
                    std::cerr << "Please set the input and output file paths in Options first.\n";
                }
                break;
            case 2: // Case two is options
                // Set input file path
                std::cout << "Enter assembly file path: ";
                std::cin >> inputPath;
                translator.set_input_file_path(inputPath);
                // Set output file path
                std::cout << "Enter output file path: ";
                std::cin >> outputPath;
                translator.set_output_file_path(outputPath);
                break;
            case 3: // Case three is help
                // Display information to the user
                printHelp();
                break;
            case 4: // Case 4 is exit
                // Set exit condition
                exit = true;
                break;
            default:
                // If the user inputs an invalid choice, prompt to retry
                std::cerr << "Invalid choice. Please try again.\n";
                break;
        }
    }

    return 0;
}


// TERMINAL MAIN (DEPRICATED)
// THIS USES THE UI CLASS
//
// int main(int argc, char *argv[]) {
//     if (argc == 2){
// 		if (argv[1] == "help" or argv[1] == "-h"){
// 			print_help();
// 		}
// 		else {
// 			printf("Improper format. For help, enter './assemble help' or './assemble -h'.");
// 		}
// 		return;
// 	}
// 	if (argc == 1 or argc > 3){
// 		printf("Improper format. For help, enter './assemble help' or './assemble -h'.");
// 		return;
// 	}
// 	string inputPath = argv[1];
// 	string outputPath = argv[2];
// 	UI ui = UI(inputPath, outputPath);
// 	ui.run();
//     return 0;
// }



