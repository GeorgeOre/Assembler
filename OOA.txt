UseMyAssembler Object Descriptions
By Jeb Brysacz and George Ore (name of assembler is a WIP)
UI Class
Description:
This class implements the command line user interface. It is the only layer that interacts with the user as the assembler application runs. It contains all of the necessary logic to run the program in all possible states. It has access to all information necessary for state management and user interaction. 
Base Class:
None.
Data Members: 
current_state
Description: The current state of the application. 
Applicability: Instance 
Derivability: State is derived from the user’s inputs and/or a Translator instance’s messages. 
Constraints: Must be one of the defined states. Otherwise it means undefined behavior. 
Type: state_enum
user_request
Description: A message from the user attained via the terminal. 
Applicability: Instance 
Derivability: Can only be derived from user terminal input while the UI instance is in an appropriate state.
Constraints: Only on the choice of user (must understand the functional specification).
Type: String
user_response
Description: A message to be returned to the user via the terminal. 
Applicability: Instance 
Derivability: Can be derived from the current state or from a message from a Translator instance.
Constraints: Must be one of the predefined responses in the response_table. 
Type: String
state_enum
Description: An enumerated representation of all possible states. 
Applicability: Class
Derivability: Is predefined by assembler programmers.
Constraints: None.
Type: Enum
response_table
Description: A table containing every possible message to be returned to the user via the terminal. 
Applicability: Class
Derivability: Values are preset by the developers of the assembler and can be found in the functional specifications.
Constraints: Cannot be changed or accessed by the user.
Type: Hashtable
command_table
Description: A table containing all possible command input values. These are used to compare to newly fetched user_requests.
Applicability: Class
Derivability: Values are preset by the developers of the assembler and can be found in the functional specifications.
Constraints: Cannot be changed or accessed by the user.
Type: Hashtable
Constructors: 
UI_init
Description: Initializes the UI instance with the default starting state.
Arguments: None.
Return Value: event_enum
Destructors: 
None (command line interrupt or alt+f4).
Methods: 
Accessors:
None.
Mutators: 
None.
General: 
parse_request
Description: Get an input from the user with STDIO. Parse the command and compare it to valid commands in the command_table. If valid, parses the request to ensure that the arguments are valid. Returns an appropriate event_enum.
Arguments: None.
Return Value: event_enum
Error Handling: A special event_emun will be returned in the case of an invalid command.
set_response
Description: Handles the given event_enum. If the event_enum specifies sending a message to the user, it will send the appropriate message. 
Arguments: event_enum
Return Value: void
Private: 
None.
Operators: 
None.
Type Conversions: 
None.

Error Handling: 
Certain event enumerations are defined as “error message events” which will inform the user of the error that has occurred. The UI class is only able to detect “invalid command input” errors and invalid file path errors. However, the other errors such as syntax errors, undefined symbol errors, and file format errors are still returned to the user through the terminal. Those are detected by other classes but passed through event messages.
Helper Functions: 
None.

Translator Class
Description:
This class accesses files, parses them, and builds the outputs. This class also sends and receives event messages from the UI class instance. This class is not available to the user and has access to all information necessary for its designated tasks.
Base Class:
None.
Data Members: 
output_file_path
Description: The output file path to place all of the translator’s generated files. 
Applicability: Instance.
Derivability: Derived from the UI calling translator methods to set output file path. 
Constraints: Can be either relative or absolute path, does not necessarily need to be an existing file already.
Type: String
input_file_path
Description: The current state of the application. 
Applicability: Instance.
Derivability: Derived from UI class calling method to set the file path based on user input.
Constraints: Must be an actual file with PIC assembly code. 
Type: String
lines_array
Description: The ordered array of line objects ready to translate. 
Applicability: Instance.
Derivability: Derived solely from the lines of the input file. 
Constraints: Each line must have the proper formatting, but this is handled by the line class.
Type: Line array
output_file
Description: The output file to write to.
Applicability: Instance.
Derivability: Derived from the output file path. 
Constraints: Same as output file path.
Type: file/fstream
contains_error
Description: Indicates if the input file contains an error.
Applicability: Instance.
Derivability: Can only be determined/set by the return value of the define_lines function.
Constraints: Initialized as false.
Type: Boolean
op_code_enum
Description: An enumeration of all of the possible op codes.
Applicability: Class.
Derivability: Predefined by the assembler developers. 
Constraints: Must be hashable. Must be one of the defined messages. Otherwise it means undefined behavior. 
Type: Enum
pseudo_op_enum
Description: An enumeration of all of the possible pseudo op codes.
Applicability: Class.
Derivability: Predefined by the assembler developers. 
Constraints: Must be hashable. Must be one of the defined messages. Otherwise it means undefined behavior. 
Type: Enum
section_enum
Description: An enumeration of all of the sections.
Applicability: Class.
Derivability: Predefined by the assembler developers. 
Constraints: Must be hashable. Must be one of the defined messages. Otherwise it means undefined behavior. 
Type: Enum
const_prefix_enum
Description: An enumeration of all of the possible constant prefixes.
Applicability: Class.
Derivability: Predefined by the assembler developers. 
Constraints: Must be hashable. Must be one of the defined messages. Otherwise it means undefined behavior. 
Type: Enum
text_label_hashmap
Description: A hashmap used for storing user defined program memory space labels.
Applicability: Class.
Derivability: All entries are user defined. 
Constraints: Labels names must be unique. 
Type: Hashmap
data_label_hashmap
Description: A hashmap used for storing user defined data memory space labels.
Applicability: Class.
Derivability: All entries are user defined. 
Constraints: Label names must be unique. 
Type: Hashmap
const_hashmap
Description: A hashmap used for storing user defined program constants.
Applicability: Class.
Derivability: All entries are user defined. 
Constraints: Constant names must be unique. 
Type: Hashmap
Constructors: 
init_translator
Description: Creates and returns a new translator instance with the given input and output file paths.
Arguments: input file path (String); output file path (String)
Return Value: translator
Destructors: 
None (command line interrupt or alt+f4).
Methods: 
Accessors:
get_input_file_path
Description: Return the absolute file path of the input file
Arguments: none
Return Value: String
get_output_file_path
Description: Return the absolute file path of the output file 
Arguments: none
Return Value: String
get_error_file_path
Description: Return the absolute file path of the error file 
Arguments: none
Return Value: String
Mutators: 
set_intput_file_path
Description: Update the absolute file path of the input file. 
Arguments: new_input_file_path (String)
Return Value: None.
set_output_file_path
Description: Update the absolute file path of the output file. 
Arguments: new_output_file_path (String)
Return Value: None.
set_error_file_path
Description: Update the absolute file path of the error file 
Arguments: none
Return Value: String
General: 
*** NOTE: Include files are not handled until after the original file has been handled. This is to easily preserve program memory space line enumeration.
define_lines (without parameter)
Description: Opens the instance’s input_file_path String’s file and parses every line into line objects with the line constructor init_line. Empty, space/tab only, or commented-out lines will not be included. If any errors are encountered while translating the code, it will set contains_error to true and return an error event_enum. If a line contains the “.include” pseudo op without errors, then it will instead append the line into a local list. Once it has defined all the lines in the default input file, it will call the overloaded version of define_lines with the include file path.
Arguments: None.
Return Value: event_enum. 
define_lines (with parameter)
Description: Same as the other version of define_lines but defines lines from the given path instead.
Arguments: file_path (String)
Return Value: event_enum. 
first_pass
Description: Asserts that the lines_array data member has been initiated. Loops through every line inside of the instance’s lines_array and stores any constants, or labels that it encounters into the const_hashmap, text_label_hasmap,  and data_label_hashmap structures.
Arguments: None.
Return Value: None.
second_pass
Description: Asserts that the lines_array data member has been initiated. Loops through every line inside of the lines_array. If the line has symbolic parameters, it translates it into PICHEX format using the data in the hashmap structures.
Arguments: None. 
Return Value: None.

Private: 
return_message
Description: Returns message for use of UI. 
Arguments: event_enum 
Return Value: event_enum

make_error_file 
Description: Takes in line array, iterates through each line and appends to the output file line numbers and their corresponding error types. Returns a confirmation event when done
Arguments: None.
Return Value: event_enum
Operators: 
None.
Type Conversions: 
None. 
Error Handling: 
All of the error handling detection in this class will occur in the define_lines. The specific types of errors that this function handles are syntax errors, undefined symbol errors, and file formatting errors. Because we will output every single error to an error file, if at least one error occurs, the define lines function will not assemble the code into the expected PICHEX output file. Instead it will create an error output file and return a generic error enum, since adding specificity to this would make for redundancy in our error handling. The UI class handles the communication of the errors to the user.
Helper Functions: 
None.

Line Class 
Description:
This class represents a singular line of assembly to be assembled. 
Base Class:
None
Data Members: 
line_number
Description: The assembly file line number of a line. 
Applicability: Instance 
Derivability: Derived from line number of a specific line. 
Constraints: Must be equal to the line of assembly it is reading.
Type: Unsigned int
line_pseudo_ops
Description: The pseudo-op of the line.
Applicability: instance 
Derivability: Taken from line parsing. 
Constraints: Must be a supported pseudo-op. 
Type: pseudo_op_enum 
line_op_code
Description: The op-code of a specific line. 
Applicability: instance 
Derivability: Take from the line parsing. 
Constraints: Must be a defined op-code.
Type: op-code-enum 
line_section
Description: The section a line is in. 
Applicability: instance 
Derivability: Whatever section the parsed line is in. 
Constraints: Must be a supported section. 
Type: section_enum 
line_labels
Description: The label a line has. 
Applicability: instance 
Derivability: From the parsed line of code, if it contains a label. 
Constraints: Has to have an occurrence in the label hashtable.
Type: String
line_constants
Description: Any user-defined constants on the line. 
Applicability: instance 
Derivability: Taken from the parsed line of code. 
Constraints: Must be a user defined symbol in the corresponding hashtable.
Type: String  
line_operands
Description: The operands of the op-code. 
Applicability: instance 
Derivability: Taken from the parsed line of code.
Constraints: Must be proper type of operand, must have correct number for corresponding op-code.
Type: array 
error
Description: Indicates if the line contains an error.
Applicability: Instance.
Derivability: Can only be determined/set by inside of the init_line function.
Constraints: None.
Type: line_error
Constructors: 
init_line
Description: Takes a string and parses it into a line object. 
Arguments: String (expecting one line)
Return Value: None.
Destructors: 
None (command line interrupt or alt+f4).
Methods: 
Accessors:
get_line_number
Description: Return the line number. 
Arguments: None.
Return Value: Unsigned int. 
get_line_pseudo_ops
Description: Return the pseudo-op. 
Arguments: none 
Return Value: pseudo_op_enum 
get_line_op_codes
Description: Return the line’s op-code. 
Arguments: none 
Return Value: op_code_enum.
get_line_section
Description: Return the line’s section. 
Arguments: none 
Return Value: section_enum. 
get_line_labels
Description: Return the line’s label. 
Arguments: none 
Return Value: String.
get_line_constants
Description: Return the line’s constants. 
Arguments: none 
Return Value: String array.  
get_line_operands
Description: Return the line’s operands. 
Arguments: none 
Return Value: Array. 
Mutators: 
set_line_number
Description: Sets the line number of the line.
Arguments: none 
Return Value: None 
set_line_op_codes
Description:Sets the line’s op-code. 
Arguments: none 
Return Value: None. 
set_line_operands
Description: Sets the line’s operands. 
Arguments: none 
Return Value: None.
General: 
write_PICHEX
Description: Translates a line to PIC HEX. Writes line to output_file_path file.
Arguments: output_file_path 
Return Value: None
check_error
Description: Checks if a line has an error 
Arguments: error_file_path 
Return Value: error_enum or void
Private: 
None. 
Operators: 
None.

Type Conversions: 
None.

Error Handling: 
None.

Helper Functions: 
None.
Simple Types
event_enum
Description: 
An enumerated representation of all possible events. This includes everything from user response events, to all error events.
Scope: 
Global
Type: 
Enum
line_error
Description: 
A structure that contains a string and event_enum to contain the details of an error.
Scope: 
Line instance
Type: 
Line_error (custom)

Pictorial Class Summary

Main Loop
Here we define the pseudocode for the flow of the main loop of the program. The main loop consists of a switch statement that executes a code based on what state the program is. Therefore, the program operates as a state machine that changes its state according to defined events. This summary will cover several paths that the states can flow through. For example, a successful and unsuccessful assembler operation leads to different paths. However, they can converge to the same state later under the right sequence of events. Also included is how the execution relies on the UI, Line, and Translator classes, as well as some high-level descriptions of major methods in the classes.

1. User executes the assembler program. This includes instantiating the UI and translator class.
2. Startup state begins. CLI gets launched and the user is prompted for input by the UI instance.
3. Input is parsed by the UI instance. Begins processing state. Much of the input handling and parsing will be done with the help of existing C++ libraries such as stdio. Parsed input will be stored in array format.
4. UI cross-references the parsed command and arguments with the user commands table. 
5a. Begins error state. Throws error upon unknown command or undefined file path into the error state. Wait for acknowledgement before going back to start state. 
5b. If there are no errors here, continue in the processing state.
6a. Help command was parsed, displays pre-defined help output.
6b. Sends information to the translator. 
7a. Receives success or error message from translator. If successful, return with a message showing output file path. Wait for acknowledgement before going back to the start state.
7b. Error state begin. Error message was received, which includes error output file path. Report errors thrown and give absolute file path as output to user. Wait for acknowledgement before going back to the start state.

Translator main loop
1. Receives “translate” command executed in UI processing state. Inputs are assembly the file path and the output file path.
2. Mutates the asm file path and, optionally, output file path attributes of itself.
3. Call the self.define_lines (see below) method.
4. Receives success or error message from define_lines. If error, returns error message. If success, continue.
5. Success message was received. From this point on, no errors will be thrown, since all the error handling was done in the define_lines method. 
6. Calls first pass method (see below), then calls second pass method (see below).
7. Returns a success event enum message.

Define_lines method
1. Receives execution command, with input file path as argument.
2. Reads from file using ifstream library.
3. Line by line, parses line of assembly code to line class. Appends this line to translator.line_array attribute. Does error handling for each line, reporting syntax errors, undefined symbol errors, file format errors. Processes include lines after the end of the current one recursively. 
5. Terminates with translator.line_array fully constructed, returns success or error message.

First pass method
1. Receives execution command, no arguments.
2. For each line in the list of user-defined symbol lines, define each symbol in the corresponding line object of the line_array attribute in Translator. Handles labels depending on the section they are in.
3. Return first pass success event enum.

Second pass method
1. Receives execution command, with hex code output file as output.
2. Using ofstream library, open file.
3. For each line of the line array, look up each symbol, and translate into the corresponding hex code, stored in a table as a translator attribute. Append each to a string, using the hex code line format as a template. Return completed string, which is a full translation of an assembly instruction and its argument(s).
4. Write each completed string to the output file. Returns first pass success event enum.
